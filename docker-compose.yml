services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka-1:
    image: wurstmeister/kafka:2.12-2.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LOG_DIRS: /kafka/kafka-logs-1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kafka-network
    depends_on:
      - zookeeper

  kafka-2:
    image: wurstmeister/kafka:2.12-2.5.0
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LOG_DIRS: /kafka/kafka-logs-2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kafka-network
    depends_on:
      - zookeeper

  producer:
    build:
      context: .
      dockerfile: Dockerfile-producer
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - kafka-1
      - kafka-2
    networks:
      - kafka-network
    command: python /app/scripts/producer.py


  spark:
    build: 
      context: .
      dockerfile: Dockerfile-consumer
    volumes:
      - ./scripts:/opt/bitnami/spark/scripts
    environment:
      - SPARK_MODE=client
    ports:
      - "4040:4040" 
    depends_on:
      - kafka-1
      - kafka-2
    networks:
      - kafka-network
    command: spark-submit /opt/bitnami/spark/scripts/consumer.py

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    networks:
      - kafka-network
    volumes:
      - cassandra-data:/var/lib/cassandra

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - kafka-network


volumes:
  postgres-db-volume:
  cassandra-data:
  grafana-data:
    driver: local

networks:
  kafka-network:
    driver: bridge
