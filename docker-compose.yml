services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka-1:
    image: wurstmeister/kafka:2.12-2.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LOG_DIRS: /kafka/kafka-logs-1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kafka-network
    depends_on:
      - zookeeper

  kafka-2:
    image: wurstmeister/kafka:2.12-2.5.0
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LOG_DIRS: /kafka/kafka-logs-2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kafka-network
    depends_on:
      - zookeeper

  producer:
    build:
      context: .
      dockerfile: Dockerfile-producer
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - kafka-1
      - kafka-2
    networks:
      - kafka-network
    command: python scripts/producer.py


  spark:
    build: 
      context: .
      dockerfile: Dockerfile-consumer
    volumes:
      - ./scripts:/opt/bitnami/spark/scripts
    environment:
      - SPARK_MODE=client
    ports:
      - "4040:4040" # Puerto para UI de Spark
    depends_on:
      - kafka-1
      - kafka-2
    networks:
      - kafka-network
    command: "spark-submit /opt/bitnami/spark/scripts/consumer.py"

  airflow-init:
    image: apache/airflow:2.5.1
    container_name: airflow_init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    networks:
      - kafka-network
    entrypoint: ["airflow", "db", "init"]
    depends_on:
      - postgres

  airflow-webserver:
    image: apache/airflow:2.5.1
    container_name: airflow_webserver
    restart: always
    user: root
    depends_on:
      - airflow-init
      - airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
    networks:
      - kafka-network
    command: "airflow webserver"

  airflow-scheduler:
    image: apache/airflow:2.5.1
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
    networks:
      - kafka-network
    command: ["bash", "-c", "sleep 10 && airflow scheduler"]

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - kafka-network

volumes:
  postgres-db-volume:

networks:
  kafka-network:
    driver: bridge
